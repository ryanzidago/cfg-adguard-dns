use std::env;
use std::fs::File;
use std::io::{Error, Write};
use std::process::Command;

const RESOLVCONF_HEAD_PATH: &str = "/etc/resolvconf/resolv.conf.d/head";

const DEFAULT_TEMPLATE: &str = "
# Dynamic resolv.conf(5) file for glibc resolver(3) generated by resolvconf(8)
#     DO NOT EDIT THIS FILE BY HAND -- YOUR CHANGES WILL BE OVERWRITTEN
# 127.0.0.53 is the systemd-resolved stub resolver.
# run \"systemd-resolve --status\" to see details about the actual nameservers.
";

const ADGUARD_DNS_SERVER: &str = "
# AdGuard DNS 
# https://adguard-dns.com/en/public-dns.html
nameserver 94.140.14.14
nameserver 94.149.15.15
";

const HELP_MESSAGE: &str = "
Usage: sudo rslvconf [options...]

        --activate      Activate AdGuard DNS server 
        --deactivate    Deactivate AdGuard DNS server 
        --verbose       Add verbose output to `--activate` and `--deactivate` commands
        --help          Display the current help message
";

fn main() -> Result<(), Error> {
    let mut file = File::create(RESOLVCONF_HEAD_PATH)?;
    let args: Vec<_> = env::args().collect();

    println!("args: {:#?}", args);

    match args.len() {
        1 => println!("{}", HELP_MESSAGE),
        _ => match &args[1][..] {
            "--help" => println!("{}", HELP_MESSAGE),
            "--activate" | "activate" => activate_adguard_dns(&mut file),
            "--deactivate" | "deactivate" => deactivate_adguard_dns(&mut file),
            _ => eprintln!("Unknown argument. Try `rslvconf --help` for more information"),
        },
    }

    Ok(())
}

fn activate_adguard_dns(file: &mut File) {
    write_default_template_with_adguard_dns(file);
    update_resolvconf();
}

fn deactivate_adguard_dns(file: &mut File) {
    write_default_template(file);
    update_resolvconf();
}

fn write_default_template_with_adguard_dns(file: &mut File) {
    let content = format!("{} {}", DEFAULT_TEMPLATE, ADGUARD_DNS_SERVER);
    write!(file, "{}", content).expect("failed to write default template");
}

fn write_default_template(file: &mut File) {
    write!(file, "{}", DEFAULT_TEMPLATE).expect("failed to write default template");
}

fn update_resolvconf() {
    Command::new("resolvconf")
        .arg("-u")
        .output()
        .expect("failed to update resolvconf");
}
